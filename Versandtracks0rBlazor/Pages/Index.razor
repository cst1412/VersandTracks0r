@page "/"
@page "/{Id}"
@implements IDisposable;
@inject HttpClient Http;
@inject AppState appState;
@inject ILogger<Index> log;
@inject NavigationManager navManager;
@using Versandtracks0rBlazor.Models;
<div class="container-app ">

    @if(data != null)
    {
        <div class="row">
            <div class="col-main-list">
                <MainList @ref="mainListInstance" OnItemClick="@OnItemClick" dataSource="@data"></MainList>
            </div>
            @if(selectedShipment != null && !addFormVisible)
                {
                    <div class="col-shipment-detail">
                        <ShipmentDetail  OnDelete="@onShipmentDelete" OnCloseClick="@onDetailCloseClick" shipment="@selectedShipment"></ShipmentDetail>
                    </div>
                }
            @if(addFormVisible)
            {
                <div class="col-shipment-detail">
                    <ShipmentNewForm OnSave="@onNewFormSave" OnCloseClick="@onNewFormClose" ></ShipmentNewForm>
                </div>
            }
        </div>
    }
    else{
        <p><em>Loading...</em></p>
    }
</div>

@code{
    [Parameter]
    public string Id { get; set; }
    public List<Models.Shipment> data = null;
    public Models.Shipment selectedShipment = null;
    public bool addFormVisible = false;
    private MainList mainListInstance;

    protected override async Task OnInitializedAsync()
    {
        await this.loadData();
        this.StateHasChanged();
        this.processQueryParams();
        this.log.LogDebug("initialized");
        this.appState.OnAddButtonClicked += this.showAddForm;
    }


    private void OnItemClick(Models.Shipment shipment)
    {
        this.selectedShipment = shipment;
        this.mainListInstance.selectedShipment = shipment;
        this.addFormVisible = false;
        if (shipment != null)
        {
            this.navManager.NavigateTo(shipment.Id.ToString());
        }
    }

    public void showAddForm(MouseEventArgs e)
    {
        this.addFormVisible = true;
        this.onDetailCloseClick(null);
        this.StateHasChanged();
        this.navManager.NavigateTo("-1");

    }

    public void onNewFormClose(MouseEventArgs e)
    {
        this.addFormVisible = false;
    }

    public void onNewFormSave(Shipment shipment)
    {
        this.data.Add(shipment);
        this.OnItemClick(shipment);
    }


    public void onDetailCloseClick(MouseEventArgs e)
    {
        this.selectedShipment = null;
        this.mainListInstance.selectedShipment = null;
    }

    public async void onShipmentDelete(Models.Shipment shipment)
    {
        await this.loadData();
        this.navManager.NavigateTo("");

    }

    private async Task loadData()
    {
        this.data = await Http.GetFromJsonAsync<List<Models.Shipment>>(Util.ApiUrl + "api/Shipments");
    }

    private void processQueryParams()
    {
        if (!string.IsNullOrWhiteSpace(this.Id))
        {
            int parsedId;
            bool parseResult = int.TryParse(this.Id, out parsedId);
            if (parseResult)
            {
                if (parsedId == -1)
                {
                    this.showAddForm(null);
                }
                else
                {
                    var shipment = this.data.FirstOrDefault(x => x.Id == parsedId);
                    if (shipment != null)
                    {
                        this.selectedShipment = shipment;
                        this.mainListInstance.selectedShipment = shipment;
                    }
                }
            }
        }
    }


    public void Dispose()
    {
        this.appState.OnAddButtonClicked -= this.showAddForm;
    }


}
