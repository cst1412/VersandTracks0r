 
@inject ILogger<Index> logger

<div class="container-main-list">
    @foreach (var item in dataSource)
    {
        <div 
        class="@((@selectedShipment == null || @selectedShipment.Id != item.Id ? 
                "main-list-item cursor-pointer" 
                : "main-list-item-selected main-list-item cursor-pointer "))"
                 @onclick="@(e => _onItemClick(@item))">
            <div class="header-main-list-item">
                <div class="@item.Carrier.ToString().ToLower()">

                </div>
                <div>
                    @item.Comment (@item.TrackingId)
                </div>
            </div>

        @if(item.HasData){
            <div class="container-shipment-history">
                    <div>
                        <i class="@ShipmentUtil.GetShipmentStatusIcon(@item.Status)"></i>
                    </div>
                    <div>
                    <div>
                        <div class="history-time">
                            @item.UpdatedAt.ToString("dd.MM.yyyy hh:mm") - @item.History[@item.History.Count -1].Location
                        </div>
                        <div class="history-message">
                            @item.History[@item.History.Count -1].Message
                        </div>
                    </div>
                    </div>
            </div>
        }
        </div>
    }

</div>


@code{
    [Parameter]
    public List<Models.Shipment> dataSource { get; set; }

    [Parameter]
    public EventCallback<Models.Shipment> OnItemClick { get; set; }

    public Models.Shipment selectedShipment = null;

    public async Task _onItemClick(Models.Shipment shipment)
    {
        if (this.selectedShipment == null || this.selectedShipment.Id != shipment.Id)
        {
            this.selectedShipment = shipment;

        }
        else
        {
            this.selectedShipment = null;
        }
        logger.LogDebug(shipment);

        await this.OnItemClick.InvokeAsync(this.selectedShipment);
    }

}