@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@inject AppState appState;
<div class="shipment-detail">
    <div>
        <div class="header-shipment-detail">
            <div class="@shipment.Carrier.ToString().ToLower()">

            </div>
            <div>
                @shipment.Comment (@shipment.TrackingId)
            </div>
            <div class="header-shipment-detail-controls">
                <button disabled="@requestPending" @onclick="OnDeleteClick" class="btn btn-danger">
                    @if(!requestPending){
                    <i class="fas fa-trash"></i>
                }
                 else{
                    <i class="fas fa-circle-notch fa-spin"></i>
                 }
                
                    
                    </button>
            </div>
        </div>

        @if(shipment.HasData){
        <div>

            @foreach (var historyEntry in shipment.History)
            {
            <div class="container-shipment-history">
                <div>
                    <i class="@ShipmentUtil.GetShipmentStatusIcon(historyEntry.Status)"></i>
                </div>
                <div>
                    <div>
                        <div>
                            @historyEntry.UpdatedAt.ToString("dd.MM.yyyy hh:mm") - @historyEntry.Location
                        </div>
                        <div>
                            @historyEntry.Message
                        </div>
                    </div>
                </div>
            </div>
            }
        </div>
        <Leaflet history="@shipment.History"></Leaflet>
       
        }

    </div>
    <div class="container-shipment-detail-controls-mobile">
            <div>
                <button class="btn btn-danger" disabled="@requestPending" @onclick="OnDeleteClick">
                @if(!requestPending){
                <i class="fas fa-trash"></i>
                }
                 else{
                    <i class="fas fa-circle-notch fa-spin"></i>
                 }
                
                </button>
                
            </div>
            <div><button class="btn btn-primary" disabled="@requestPending" onclick="@OnCloseClick"><i class="fas fa-times"></i></button></div>
    </div>
</div>

@code{
    [Parameter]
    public Models.Shipment shipment { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCloseClick { get; set; }

    [Parameter]
    public EventCallback<Models.Shipment> OnDelete { get; set; }

    public bool requestPending = false;


    public async Task OnDeleteClick(MouseEventArgs e)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Möchten Sie den Eintrag wirklich löschen?");
        if (confirmed)
        {
            this.requestPending = true;
            var deleteResult = await this.Http.DeleteAsync(Util.ApiUrl + "api/Shipments/" + this.shipment.Id.ToString());
            this.requestPending = false;
            if (deleteResult.IsSuccessStatusCode)
            {
                appState.showToast("Eintrag erfolgreich gelöscht", Models.ToastType.Success);
                await this.OnDelete.InvokeAsync(this.shipment);
                await this.OnCloseClick.InvokeAsync(null);
            }


        }
    }
}